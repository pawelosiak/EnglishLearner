package extend.testModule;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;

import app.WindowOne;
import extend.testModule.TestPanel.MasterTask;
/**
 *English learner test module.
 * @author pawel
 */
public class Tester extends javax.swing.JFrame implements ActionListener{
	/**
     * Username value.
     */
    public static String u;
	StartPanel firstPanel ;
    /**
     * Second panel with test mechanic.
     */
    public static TestPanel testPanel ;
    /**
     * Last panel with result of test.
     */
    public static FinishPanel lastPanel;
    private final int width =600;
    private final int height = 400;
    private final Dimension sizeFrame = new Dimension(width, height);
    private final Dimension sizePanel = new Dimension(500 , 500);
    /**
     * List words for test.
     */
    public static List<String> words = new ArrayList<String>();
    /**
     * Button for close test module from first welcome panel.
     */
    public static JButton exitBtn = new JButton("EXIT");
    /**
     * BUtton for close test module from finished panel.
     */
    public static JButton exitFinalBtn = new JButton("EXIT");
    /**
     * Button for starting test.
     */
    public static JButton startBtn = new JButton("START");
    /**
     * Button for checking answears.
     */
    public static JButton checkBtn = new JButton("CHECK");
    private static JFileChooser fc;
    private static File defined;
    private static BufferedReader br;
    private static String wiersz = null;
   
    /**
     * Creates new form Tester.
     * @param user 
     * @param list 
     */
    public Tester(String user) {
        
    	this.u = user;
    	defined = new File("EnglishLearner/"+u);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.setPreferredSize(sizeFrame);
        setResizable(false);
        this.setLocation(300,100);
        firstPanel = new StartPanel(u);
        firstPanel.getSize(sizePanel);
        firstPanel.setVisible(true);
        this.add(firstPanel);
        this.setLayout(new FlowLayout(FlowLayout.CENTER));
        open();
        initComponents();
		setTitle("English Learner v 0.1 -beta version");
		this.setVisible(true);
        pack();
        

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 40));
        exitBtn.addActionListener(this);
        startBtn.addActionListener(this);
        exitFinalBtn.addActionListener(this);
        setVisible(false);
        pack();
    }
    /**
     * This method is opened and get file content.
     */
    static void open() {

		fc = new JFileChooser(defined);
		System.out.println(defined.getAbsolutePath());
		
		if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {

			int i=0;
			File plik1 = fc.getSelectedFile();
				//Import file values to ArrayList
				try {
					br = new BufferedReader(new FileReader(plik1));
					while((wiersz=br.readLine()) != null) {
	
					System.out.println("Pobieranie zawartości pliku do listy. " + i);
					
					String prep = replace((wiersz.trim()));
					words.add(prep);
						i++;
						
					}
					br.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}

			String plik = new String(fc.getSelectedFile().toString());
			System.out.println(plik);
			System.out.println(words.toString());
			
			
		}

		else {
			WindowOne win = new WindowOne(u);
			win = new WindowOne(u);
			win.setVisible(true);
			

		}

	}
    /**
     * @param w
     * @return word
     */
    public static String replace(String w) {
		  String word = w.replaceAll("ą", "a").replaceAll("Ą", "A").replaceAll("ć", "c").replaceAll("Ć", "C").replaceAll("ę", "e").replaceAll("Ę", "E").replaceAll("ł", "l").replaceAll("Ł", "L").replaceAll("ń", "n").replaceAll("Ń", "N").replaceAll("ó", "o").replaceAll("Ó", "O").replaceAll("ś", "s").replaceAll("Ś", "S").replaceAll("ż", "z").replaceAll("Ż", "Z").replaceAll("ź", "z").replaceAll("Ź", "Z");

		 return word;
	 }
    @Override
	public void actionPerformed(ActionEvent e) {
		
		if(e.getSource() == startBtn) {
			
			firstPanel.setVisible(false);
			testPanel = new TestPanel( firstPanel.level);
			testPanel.setSize(sizePanel);
			this.add(testPanel);
			testPanel.setVisible(true);
			
			lastPanel = new FinishPanel();
			lastPanel.setSize(sizePanel);
			this.add(lastPanel);
			lastPanel.setVisible(false);

		}
		if(e.getSource() == exitBtn) {
		System.out.println("button EXIT pressed.");
		
		clearBuff();
		WindowOne win = new WindowOne(u);
		
		win.setVisible(true);
		this.dispose();
		

		}
		
		if(e.getSource() == exitFinalBtn) {
			System.out.println("button EXIT pressed.");
			testPanel.clear();
			clearBuff();	
			WindowOne win = new WindowOne(u);
				
			win.setVisible(true);	
			this.dispose();

			}
		String change = checkBtn.getText();
		if(change.equals("END TEST")) {
			
			lastPanel.setVisible(true);
			
		}

	}
    private void clearBuff() {
    	words.clear();
    }
}
