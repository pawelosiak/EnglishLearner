package extend.testModule;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.SwingWorker;
import javax.swing.Timer;

/**
 *
 * @author pawel
 */
public class TestPanel extends javax.swing.JPanel {

    /**
     * Creates new form TestPanel
     * @param words 
     * @param level 
     */
    public TestPanel(List<String>words, String level) {
        
        end=false;
        this.difficult = level;
        this.data = words;
        counterWords = (words.size()/2)-1;
       
        System.out.println(data.size());

        if(difficult.equals("begginer")) {
        	minutes = delayBegginer*(data.size()/2);
        	minutes=(minutes/1000)/60;
        	
        	System.out.println(minutes);
        }
        else if(difficult.equals("intermidiate")) {
        	 minutes = delayIntermediate*(data.size()/2);
        	minutes=(minutes/1000)/60;
        	
        	System.out.println(minutes);
        }
        else if(difficult.equals("expert")) {
        	minutes = delayExpert*(data.size()/2);
        	minutes=(minutes/1000)/60;
        	
        	System.out.println(minutes);
        }
        
        initComponents();
        
        timeAll = new Timer(1000, new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {

				if(seconds == 0 && minutes>0) {
					seconds=60;
					
					if(minutes<10) {
						timerLabel.setText("Time to end: 0"+String.valueOf(minutes)+":00");
					}
					else if(minutes>=10) {
						timerLabel.setText("Time to end: "+String.valueOf(minutes)+":00");
					}
					minutes--;
				}else if(seconds < 60) {
					if(minutes<10 || seconds<10) {
						if(seconds<10) {
							timerLabel.setText("Time to end: 0"+String.valueOf(minutes)+":0"+String.valueOf(seconds));
						}else if(minutes<10 && seconds>=10 ) {
							timerLabel.setText("Time to end: 0"+String.valueOf(minutes)+":"+String.valueOf(seconds));
						}
						
					}
					
					else if(minutes>=10) {
						timerLabel.setText("Time to end: "+String.valueOf(minutes)+":"+String.valueOf(seconds));
					}
					
					}
				else if(seconds < 10) {
					if(minutes<10) {
						timerLabel.setText("Time to end: 0"+String.valueOf(minutes)+":0"+String.valueOf(seconds));
					}
					else if(minutes>=10) {
						timerLabel.setText("Time to end: "+String.valueOf(minutes)+":0"+String.valueOf(seconds));
					}
					
					}

				seconds--;
				if(seconds==0 && minutes!=0) {
					minutes--;
					if(minutes<10) {
						timerLabel.setText("Time to end: 0"+String.valueOf(minutes)+":00");
					}

					seconds=60;
					if(minutes==0 && seconds==60) {
						timerLabel.setText("Time to end: 01:00");
					}
					
				}
				if(minutes==0 && seconds==0) {
					timeAll.stop();
					end = true;
					masterTask.done();

				}
				
			}
			
		});

      try {
		masterTask.doInBackground();
	} catch (Exception e1) {
		
		e1.printStackTrace();
	}
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionLabel = new javax.swing.JLabel();
        userAnswear = new javax.swing.JTextField();
        decisionLabel = new javax.swing.JLabel();
        checkBtn = new javax.swing.JButton();
        timerLabel = new javax.swing.JLabel();
        wordsCountLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));

        
        questionLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        questionLabel.setText("question text");

        userAnswear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        decisionLabel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        decisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decisionLabel.setText("decision good or bad");

        checkBtn.setText("CHECK");
        checkBtn.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {
				if(!end && counterE<data.size()) {
					compare();
					nextWord();
					
				}
				
			}
        	
        });

        timerLabel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("Time to end:");
        timerLabel.setVisible(true);

        wordsCountLabel.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        wordsCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wordsCountLabel.setText("Questions to end:  "+counterWords+"/"+data.size()/2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(decisionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(timerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wordsCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 60, Short.MAX_VALUE))
                    .addComponent(userAnswear, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(questionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(checkBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(timerLabel)
                        .addComponent(wordsCountLabel))
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(questionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userAnswear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(decisionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(checkBtn)
                .addContainerGap())
        );
        
       
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkBtn;
    private javax.swing.JLabel decisionLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JTextField userAnswear;
    private javax.swing.JLabel wordsCountLabel;
    private List<String> data = new ArrayList<String>();
    private int minutes;
    private int seconds=0;
    private Timer timeAll;
    private String difficult;
    private MasterTask masterTask = new MasterTask();
    private final int delayBegginer = 180000;
    private final int delayIntermediate = 120000;
    private final int delayExpert = 60000;

    /**
     * Boolean value for ending test with time interval or data count.
     */
    private boolean end;
    // End of variables declaration//GEN-END:variables
   
    private int counterP=0;
    private int counterE = 1;
    private int counterWords ;
    private Thread question;
    private Thread equal;
    private String replace(String w) {
		  String word = w.replaceAll("ą", "a").replaceAll("Ą", "A").replaceAll("ć", "c").replaceAll("Ć", "C").replaceAll("ę", "e").replaceAll("Ę", "E").replaceAll("ł", "l").replaceAll("Ł", "L").replaceAll("ń", "n").replaceAll("Ń", "N").replaceAll("ó", "o").replaceAll("Ó", "O").replaceAll("ś", "s").replaceAll("Ś", "S").replaceAll("ż", "z").replaceAll("Ż", "Z").replaceAll("ź", "z").replaceAll("Ź", "Z");

		 return word;
	 }
    private synchronized void selectWord(String level){
    	question = new Thread(new Runnable() {
    		public void run() {
    			if(counterP<data.size()-1) {
    	    		questionLabel.setText(data.get(counterP));
    	    		if(level.equals("begginer")) {
    	    			try {
							Thread.sleep(delayBegginer);
							counterP+=2;
							nextWord();
						} catch (InterruptedException e) {
							
							e.printStackTrace();
						}
    	    		}
    	    		if(level.equals("Intermidiate")) {
    	    			try {
							Thread.sleep(delayIntermediate);
							counterP+=2;
							nextWord();
						} catch (InterruptedException e) {
							
							e.printStackTrace();
						}
    	    		}
    	    		if(level.equals("expert")) {
    	    			try {
							Thread.sleep(delayExpert);
							counterP+=2;
							nextWord();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
    	    		}
    	    		
    	    	}
    		}
    	});
    	
    	question.start();
    }
    private synchronized void compare() {
    	String toCompare = replace(userAnswear.getText());
    	
    	
    	equal = new Thread(new Runnable() {
    		public void run() {
    			if(toCompare.equals(data.get(counterE))) {
    				decisionLabel.setText("goodAnswear");
    				question.interrupt();
    				}
    			else if(!toCompare.equals(data.get(counterE))) {}
    			
    			counterE+=2;
    			
    		}
    	});
    	equal.start();
    	try {
			equal.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    private synchronized void nextWord() {
    	if(counterWords>0) {
    	counterWords-=1;
    	}
    	wordsCountLabel.setText("Questions to end:  "+counterWords+"/"+data.size()/2);
    	selectWord(difficult);
    	
    	
    }
    class MasterTask extends SwingWorker<Void, Void>{

		@Override
		protected Void doInBackground() throws Exception {
			timeAll.start();
			Thread.sleep(1000);
			selectWord(difficult);

			return null;
		}

		

		@Override
		protected void done() {
			if(end) {
			Tester.testPanel.setVisible(false);
			Tester.lastPanel.setVisible(true);
			}
		}
    	
    }
	
}
